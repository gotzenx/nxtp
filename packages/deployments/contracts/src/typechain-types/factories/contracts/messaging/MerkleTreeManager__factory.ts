/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MerkleTreeManager,
  MerkleTreeManagerInterface,
} from "../../../contracts/messaging/MerkleTreeManager";

const _abi = [
  {
    inputs: [],
    name: "MerkleLib__insert_treeIsFull",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_alreadyArborist",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_zeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previous",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updated",
        type: "address",
      },
    ],
    name: "ArboristUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "LeafInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "LeavesInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "arborist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "branch",
    outputs: [
      {
        internalType: "bytes32[32]",
        name: "",
        type: "bytes32[32]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_arborist",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "insertStorage",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rootAndCount",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newArborist",
        type: "address",
      },
    ],
    name: "setArborist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50612464806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063c9b0a6de11610071578063c9b0a6de1461023e578063d1851c9214610246578063d232c22014610257578063ebf0c71714610280578063fd54b2281461028857600080fd5b8063715018a6146101f15780638da5cb5b146101f9578063b1f8100d14610210578063c4d66de814610223578063c5b350df1461023657600080fd5b806334a55ee6116100f457806334a55ee6146101a557806337d9e557146101b85780633cf52ffb146101cb5780634b72d0d4146101d35780636a42b8f8146101e857600080fd5b806306661abd146101265780631b373a981461013d5780632d287e431461015257806331d0913c1461017a575b600080fd5b6052545b6040519081526020015b60405180910390f35b61015061014b3660046120d0565b610292565b005b610165610160366004612100565b610380565b60408051928352602083019190915201610134565b60535461018d906001600160a01b031681565b6040516001600160a01b039091168152602001610134565b6101656101b336600461212f565b610479565b6101656101c636600461212f565b6105a4565b60025461012a565b6101db610669565b60405161013491906121ed565b62093a8061012a565b6101506106a5565b6000546201000090046001600160a01b031661018d565b61015061021e3660046120d0565b6106d8565b6101506102313660046120d0565b610785565b6101506108a0565b610165610910565b6001546001600160a01b031661018d565b6102706000546201000090046001600160a01b03161590565b6040519015158152602001610134565b61012a610929565b60525461012a9081565b6000546201000090046001600160a01b031633146102c3576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b0381166102ea57604051630c11a52d60e11b815260040160405180910390fd5b6053546001600160a01b03908116908216810361031a5760405163606e957b60e11b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ff2fa31e21376edb31995720340ba00a41a12a7c8744a9bde552660121f4b7771910160405180910390a150605380546001600160a01b0319166001600160a01b0392909216919091179055565b60535460009081906001600160a01b031633146103b85760405162461bcd60e51b81526004016103af90612223565b60405180910390fd5b60408051610440810180835261040692869291603291839190820190839060209082845b8154815260200190600101908083116103dc5750505091835250506020918201549101529061093a565b8051603290610418908290602061203e565b50602091820151910155506052546104306032610a46565b60408051828152602081018490529081018590529092507fd50e83984b64a106ac2ee6314d689ec4d2a656d5ece6d94c585796944b52240c9060600160405180910390a1915091565b60535460009081906001600160a01b031633146104a85760405162461bcd60e51b81526004016103af90612223565b6040805161044081018083526000926032918391820190839060209082845b8154815260200190600101908083116104c7575050509183525050602091820154910152845190915060005b818110156105315761052786828151811061051057610510612246565b60200260200101518461093a90919063ffffffff16565b92506001016104f3565b5081518290603290610546908290602061203e565b506020918201519082015582015192506105606032610a46565b93507f3ef8438c07c6b4b67e70eace906a07e9b294c2f0066803f58e705567e1aa4f1b8484876040516105959392919061225c565b60405180910390a15050915091565b60535460009081906001600160a01b031633146105d35760405162461bcd60e51b81526004016103af90612223565b825160005b818110156106165761060d8582815181106105f5576105f5612246565b60200260200101516032611dfc90919063ffffffff16565b506001016105d8565b5060525491506106266032610a46565b92507f3ef8438c07c6b4b67e70eace906a07e9b294c2f0066803f58e705567e1aa4f1b83838660405161065b9392919061225c565b60405180910390a150915091565b61067161207c565b604080516104008101918290529060329060209082845b815481526020019060010190808311610688575050505050905090565b6000546201000090046001600160a01b031633146106d6576040516311a8a1bb60e31b815260040160405180910390fd5b565b6000546201000090046001600160a01b03163314610709576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610727575060025415155b15610745576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831662010000909204160361077957604051634a2fb73f60e11b815260040160405180910390fd5b61078281611e9c565b50565b600054610100900460ff16158080156107a55750600054600160ff909116105b806107bf5750303b1580156107bf575060005460ff166001145b6108225760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103af565b6000805460ff191660011790558015610845576000805461ff0019166101001790555b61084e82611eea565b610856611f1a565b801561089c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001546001600160a01b031633146108cb576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426108dd91906122c7565b116108fb576040516324e0285f60e21b815260040160405180910390fd5b6001546106d6906001600160a01b0316611f49565b60008061091d6032610a46565b60525490939092509050565b60006109356032610a46565b905090565b61094261209b565b6000836020018051610953906122da565b9081905290506001610967602060026123d7565b61097191906122c7565b81111561099157604051638eab04bb60e01b815260040160405180910390fd5b60005b6020811015610a2657816001166001036109cd578451849082602081106109bd576109bd612246565b602002015250839150610a409050565b845181602081106109e0576109e0612246565b602002015184604051602001610a00929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209350600191821c9101610994565b50604051638eab04bb60e01b815260040160405180910390fd5b92915050565b6020810154600090808203610a7d57507f27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d75792915050565b6000836001831615610a9f578054600052600060205260406000209350611352565b6002831615610ae45760018101546000527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56020526040600020935060019150611352565b6004831615610b295760028101546000527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d306020526040600020935060029150611352565b6008831615610b6e5760038101546000527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba856020526040600020935060039150611352565b6010831615610bb35760048101546000527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a193446020526040600020935060049150611352565b6020831615610bf85760058101546000527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d6020526040600020935060059150611352565b6040831615610c3d5760068101546000527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a19686020526040600020935060069150611352565b6080831615610c825760078101546000527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f836020526040600020935060079150611352565b610100831615610cc85760088101546000527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6020526040600020935060089150611352565b610200831615610d0e5760098101546000527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06020526040600020935060099150611352565b610400831615610d5457600a8101546000527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a560205260406000209350600a9150611352565b610800831615610d9a57600b8101546000527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf89260205260406000209350600b9150611352565b611000831615610de057600c8101546000527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c60205260406000209350600c9150611352565b612000831615610e2657600d8101546000527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb60205260406000209350600d9150611352565b614000831615610e6c57600e8101546000527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc60205260406000209350600e9150611352565b618000831615610eb257600f8101546000527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d260205260406000209350600f9150611352565b62010000831615610ef95760108101546000527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6020526040600020935060109150611352565b62020000831615610f405760118101546000527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6020526040600020935060119150611352565b62040000831615610f875760128101546000527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06020526040600020935060129150611352565b62080000831615610fce5760138101546000527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06020526040600020935060139150611352565b621000008316156110155760148101546000527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26020526040600020935060149150611352565b6220000083161561105c5760158101546000527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96020526040600020935060159150611352565b624000008316156110a35760168101546000527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776020526040600020935060169150611352565b628000008316156110ea5760178101546000527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526020526040600020935060179150611352565b63010000008316156111325760188101546000527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6020526040600020935060189150611352565b630200000083161561117a5760198101546000527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6020526040600020935060199150611352565b63040000008316156111c257601a8101546000527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d060205260406000209350601a9150611352565b630800000083161561120a57601b8101546000527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e60205260406000209350601b9150611352565b631000000083161561125257601c8101546000527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e60205260406000209350601c9150611352565b632000000083161561129a57601d8101546000527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea32260205260406000209350601d9150611352565b63400000008316156112e257601e8101546000527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d73560205260406000209350601e9150611352565b638000000083161561132a57601f8101546000527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a960205260406000209350601f9150611352565b7f27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d7579350602091505b601e8211611df45760018210156113b05760028316801561137e576001820154600052846020526113a7565b846000527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56020525b50604060002093505b6002821015611406576004831680156113d4576002820154600052846020526113fd565b846000527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d306020525b50604060002093505b600382101561145c5760088316801561142a57600382015460005284602052611453565b846000527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba856020525b50604060002093505b60048210156114b257601083168015611480576004820154600052846020526114a9565b846000527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a193446020525b50604060002093505b6005821015611508576020831680156114d6576005820154600052846020526114ff565b846000527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d6020525b50604060002093505b600682101561155e5760408316801561152c57600682015460005284602052611555565b846000527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a19686020525b50604060002093505b60078210156115b457608083168015611582576007820154600052846020526115ab565b846000527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f836020525b50604060002093505b600882101561160b57610100831680156115d957600882015460005284602052611602565b846000527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6020525b50604060002093505b6009821015611662576102008316801561163057600982015460005284602052611659565b846000527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06020525b50604060002093505b600a8210156116b9576104008316801561168757600a820154600052846020526116b0565b846000527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56020525b50604060002093505b600b82101561171057610800831680156116de57600b82015460005284602052611707565b846000527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926020525b50604060002093505b600c821015611767576110008316801561173557600c8201546000528460205261175e565b846000527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6020525b50604060002093505b600d8210156117be576120008316801561178c57600d820154600052846020526117b5565b846000527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6020525b50604060002093505b600e82101561181557614000831680156117e357600e8201546000528460205261180c565b846000527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6020525b50604060002093505b600f82101561186c576180008316801561183a57600f82015460005284602052611863565b846000527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26020525b50604060002093505b60108210156118c4576201000083168015611892576010820154600052846020526118bb565b846000527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6020525b50604060002093505b601182101561191c5762020000831680156118ea57601182015460005284602052611913565b846000527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6020525b50604060002093505b60128210156119745762040000831680156119425760128201546000528460205261196b565b846000527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06020525b50604060002093505b60138210156119cc57620800008316801561199a576013820154600052846020526119c3565b846000527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06020525b50604060002093505b6014821015611a245762100000831680156119f257601482015460005284602052611a1b565b846000527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26020525b50604060002093505b6015821015611a7c576220000083168015611a4a57601582015460005284602052611a73565b846000527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96020525b50604060002093505b6016821015611ad4576240000083168015611aa257601682015460005284602052611acb565b846000527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776020525b50604060002093505b6017821015611b2c576280000083168015611afa57601782015460005284602052611b23565b846000527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526020525b50604060002093505b6018821015611b8557630100000083168015611b5357601882015460005284602052611b7c565b846000527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6020525b50604060002093505b6019821015611bde57630200000083168015611bac57601982015460005284602052611bd5565b846000527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6020525b50604060002093505b601a821015611c3757630400000083168015611c0557601a82015460005284602052611c2e565b846000527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06020525b50604060002093505b601b821015611c9057630800000083168015611c5e57601b82015460005284602052611c87565b846000527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6020525b50604060002093505b601c821015611ce957631000000083168015611cb757601c82015460005284602052611ce0565b846000527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6020525b50604060002093505b601d821015611d4257632000000083168015611d1057601d82015460005284602052611d39565b846000527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226020525b50604060002093505b601e821015611d9b57634000000083168015611d6957601e82015460005284602052611d92565b846000527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356020525b50604060002093505b601f821015611df457638000000083168015611dc257601f82015460005284602052611deb565b846000527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96020525b50604060002093505b505050919050565b6000808360200160008154611e10906122da565b9182905550905060005b6020811015610a265781600116600103611e4e5783858260208110611e4157611e41612246565b015550839150610a409050565b848160208110611e6057611e60612246565b0154604080516020810192909252810185905260600160408051601f1981840301815291905280516020909101209350600191821c9101611e1a565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600054610100900460ff16611f115760405162461bcd60e51b81526004016103af906123e3565b61078281611fc5565b600054610100900460ff16611f415760405162461bcd60e51b81526004016103af906123e3565b6106d661200e565b600080546040516001600160a01b03808516936201000090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091178155600255600180546001600160a01b0319169055565b600054610100900460ff16611fec5760405162461bcd60e51b81526004016103af906123e3565b605380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166120355760405162461bcd60e51b81526004016103af906123e3565b6106d633611f49565b826020810192821561206c579160200282015b8281111561206c578251825591602001919060010190612051565b506120789291506120bb565b5090565b6040518061040001604052806020906020820280368337509192915050565b60405180604001604052806120ae61207c565b8152602001600081525090565b5b8082111561207857600081556001016120bc565b6000602082840312156120e257600080fd5b81356001600160a01b03811681146120f957600080fd5b9392505050565b60006020828403121561211257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561214257600080fd5b823567ffffffffffffffff8082111561215a57600080fd5b818501915085601f83011261216e57600080fd5b81358181111561218057612180612119565b8060051b604051601f19603f830116810181811085821117156121a5576121a5612119565b6040529182528482019250838101850191888311156121c357600080fd5b938501935b828510156121e1578435845293850193928501926121c8565b98975050505050505050565b6104008101818360005b6020808210612206575061221a565b8251845292830192909101906001016121f7565b50505092915050565b60208082526009908201526808585c989bdc9a5cdd60ba1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156122a357845183529383019391830191600101612287565b509098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4057610a406122b1565b6000600182016122ec576122ec6122b1565b5060010190565b600181815b8085111561232e578160001904821115612314576123146122b1565b8085161561232157918102915b93841c93908002906122f8565b509250929050565b60008261234557506001610a40565b8161235257506000610a40565b816001811461236857600281146123725761238e565b6001915050610a40565b60ff841115612383576123836122b1565b50506001821b610a40565b5060208310610133831016604e8410600b84101617156123b1575081810a610a40565b6123bb83836122f3565b80600019048211156123cf576123cf6122b1565b029392505050565b60006120f98383612336565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122045662cc65ac8fe68e47c4bf9d5257e63f60f38c8bd5a8e917a4bba8538a621a264736f6c63430008110033";

type MerkleTreeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeManager__factory extends ContractFactory {
  constructor(...args: MerkleTreeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTreeManager> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTreeManager {
    return super.attach(address) as MerkleTreeManager;
  }
  override connect(signer: Signer): MerkleTreeManager__factory {
    return super.connect(signer) as MerkleTreeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeManagerInterface {
    return new utils.Interface(_abi) as MerkleTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeManager {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeManager;
  }
}
